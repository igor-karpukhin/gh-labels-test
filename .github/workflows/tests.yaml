name: PR Test Runner

# This a prototype for running tests based on PR labels

on:
  pull_request:
    types: [opened, synchronize, labeled, unlabeled]

jobs:
  detect-tests:
    runs-on: ubuntu-latest
    outputs:
      int_matrix: ${{ steps.set-matrix.outputs.int_matrix }}
      e2e_matrix: ${{ steps.set-matrix.outputs.e2e_matrix }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup GO
        uses: actions/setup-go@v4
        with:
          go-version: 1.23

      - name: Install Ginkgo
        run: go install github.com/onsi/ginkgo/v2/ginkgo@latest

      - name: Get PR Labels
        id: get-labels
        uses: actions/github-script@v7
        with:
          script: |
            const labels = context.payload.pull_request.labels.map(label => label.name);
            console.log("PR Labels:", labels);
            return labels;

      - name: List available Ginkgo test labels
        id: fetch-labels
        run: |
          INT_LABELS=$(cd ./test/int && ginkgo labels | jq -R -s -c 'split("\n")[:-1]')
          E2E_LABELS=$(cd ./test/e2e && ginkgo labels | jq -R -s -c 'split("\n")[:-1]')

          echo "int_labels=$INT_LABELS" >> $GITHUB_ENV
          echo "e2e_labels=$E2E_LABELS" >> $GITHUB_ENV

      - name: Compute Test Matrix
        id: set-matrix
        uses: actions/github-script@v7
        env:
          INT_LABELS: ${{ env.int_labels }}
          E2E_LABELS: ${{ env.e2e_labels }}
        with:
          script: |
            function matchWildcards(labels, testLabels) {
              let matchedLabels = new Set();

              labels.forEach(label => {
                if (label === "test/int/*") {
                  matchedLabels = new Set(testLabels.integration);
                } else if (label === "test/e2e/*") {
                  matchedLabels = new Set(testLabels.e2e);
                } else {
                  let prefixMatch = label.match(/^test\/(int|e2e)\/(.+)$/);
                  if (prefixMatch) {
                    let category = prefixMatch[1];
                    let pattern = prefixMatch[2].replace(/\*/g, ".*"); // Convert wildcard to regex
                    let regex = new RegExp(`^${pattern}$`);
            
                    testLabels[category].forEach(test => {
                      if (regex.test(test)) {
                        matchedLabels.add(test);
                      }
                    });
                  }
                }
              });

              return [...matchedLabels];
            }

            const labels = ${{ steps.get-labels.outputs.result }};
            const testLabels = {
              integration: JSON.parse(process.env.INT_LABELS || "[]"),
              e2e: JSON.parse(process.env.E2E_LABELS || "[]"),
            };

            const matchedIntTests = matchWildcards(labels, testLabels.integration);
            const matchedE2ETests = matchWildcards(labels, testLabels.e2e);

            core.setOutput("int_matrix", JSON.stringify(matchedIntTests));
            core.setOutput("e2e_matrix", JSON.stringify(matchedE2ETests));

  run-tests:
    needs: detect-tests
    if: ${{ fromJSON(needs.detect-tests.outputs.int_matrix) != '[]' || fromJSON(needs.detect-tests.outputs.e2e_matrix) != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        type: [int, e2e] # Run for both integration and e2e tests
        test: ${{ fromJSON(needs.detect-tests.outputs.int_matrix) }}${{ fromJSON(needs.detect-tests.outputs.e2e_matrix) }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup GO
        uses: actions/setup-go@v4
        with:
          go-version: 1.23

      - name: Install Ginkgo
        run: go install github.com/onsi/ginkgo/v2/ginkgo@latest

      - name: Install Ginkgo
        run: go install github.com/onsi/ginkgo/v2/ginkgo@latest

      - name: Run Ginkgo Tests
        run: |
          cd ./test/${{ matrix.type }}
          ginkgo --label-filter="${{ matrix.test }}" -r --fail-fast
