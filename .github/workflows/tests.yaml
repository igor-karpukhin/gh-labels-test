name: Tests

# This a prototype for running tests based on PR labels

on:
  pull_request:
    types: [opened, synchronize, labeled, unlabeled]

jobs:
  detect-tests:
    name: "Select tests to run"
    runs-on: ubuntu-latest
    outputs:
      int_matrix: ${{ steps.set-matrix.outputs.int_matrix }}
      e2e_matrix: ${{ steps.set-matrix.outputs.e2e_matrix }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup GO
        uses: actions/setup-go@v4
        with:
          go-version: 1.23

      - name: Install Ginkgo
        run: go install github.com/onsi/ginkgo/v2/ginkgo@latest

      - name: Get PR Labels
        id: get-labels
        uses: actions/github-script@v7
        with:
          script: |
            const labels = context.payload.pull_request.labels.map(label => label.name);
            console.log("PR Labels:", labels);
            return labels;

      - name: List available Ginkgo test labels
        id: fetch-labels
        run: |
          INT_LABELS=$(cd ./test/int && ginkgo labels | sed 's/^int: //' | jq -s -c '.[0]')
          E2E_LABELS=$(cd ./test/e2e && ginkgo labels | sed 's/^e2e: //' | jq -s -c '.[0]')

          echo "int_labels=$INT_LABELS" >> $GITHUB_ENV
          echo "e2e_labels=$E2E_LABELS" >> $GITHUB_ENV
          
          echo "Available Integration Tests: $INT_LABELS"
          echo "Available E2E Tests: $E2E_LABELS"

      - name: Compute Test Matrix
        id: set-matrix
        env:
          INT_LABELS: ${{ env.int_labels }}
          E2E_LABELS: ${{ env.e2e_labels }}
          USE_JSON: true
        run: |
          env
          make build-labels
          ./bin/ginkgo-labels
          ./bin/ginkgo-labels > result.json
          echo "int_matrix=$(cat result.json | jq .int)"
          echo "e2e_matrix=$(cat result.json | jq .e2e)"
          
          echo "int_matrix=$(cat result.json | jq .int)" >> $GITHUB_OUTPUT
          echo "e2e_matrix=$(cat result.json | jq .e2e)" >> $GITHUB_OUTPUT

#      - name: Compute Test Matrix
#        id: set-matrix
#        uses: actions/github-script@v7
#        env:
#          INT_LABELS: ${{ env.int_labels }}
#          E2E_LABELS: ${{ env.e2e_labels }}
#        with:
#          script: |
#            function matchWildcards(labels, testLabels, testType) {
#              let matchedLabels = new Set();
#
#              for (let i = 0; i < labels.length; i++) {
#                let label = labels[i];
#
#                if (label === `test/${testType}/*`) {
#                  testLabels.forEach(test => matchedLabels.add(test));
#                } else {
#                  let prefixMatch = label.match(new RegExp(`^test/${testType}/(.+)$`));
#                  if (prefixMatch) {
#                    let pattern = new RegExp(`^${prefixMatch[1].replace(/\*/g, ".*")}$`, 'i');
#                    testLabels.forEach(test => {
#                      if (pattern.test(test)) {
#                        matchedLabels.add(test);
#                      }
#                    });
#                  }
#                }
#              }
#              return [...matchedLabels];
#            }
#
#            let labels = [];
#            try {
#              labels = JSON.parse(`${{ steps.get-labels.outputs.result }}` || "[]");
#            } catch (error) {
#              labels = [];
#            }
#
#            const matchedIntTests = matchWildcards(labels, JSON.parse(process.env.INT_LABELS), "int");
#            const matchedE2ETests = matchWildcards(labels, JSON.parse(process.env.E2E_LABELS), "e2e");
#
#            console.log("Matched Integration Tests:", matchedIntTests);
#            console.log("Matched E2E Tests:", matchedE2ETests);
#
#
#            core.setOutput("int_matrix", JSON.stringify(matchedIntTests));
#            core.setOutput("e2e_matrix", JSON.stringify(matchedE2ETests));

  run-integration-tests:
    needs: detect-tests
    if: ${{ fromJSON(needs.detect-tests.outputs.int_matrix) != '[]' }}
    strategy:
      matrix:
        test: ${{ fromJSON(needs.detect-tests.outputs.int_matrix) }}
    runs-on: ubuntu-latest
    name: "integration: ${{ matrix.test }}"
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup GO
        uses: actions/setup-go@v4
        with:
          go-version: 1.23

      - name: Install Ginkgo
        run: go install github.com/onsi/ginkgo/v2/ginkgo@latest

      - name: Run Ginkgo Test
        run: |
          cd ./test/int
          ginkgo --label-filter="${{ matrix.test }}" -r --fail-fast

  run-e2e-tests:
    needs: detect-tests
    if: ${{ fromJSON(needs.detect-tests.outputs.e2e_matrix) != '[]' }}
    strategy:
      matrix:
        test: ${{ fromJSON(needs.detect-tests.outputs.e2e_matrix) }}
    runs-on: ubuntu-latest
    name: "e2e: ${{ matrix.test }}"
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup GO
        uses: actions/setup-go@v4
        with:
          go-version: 1.23

      - name: Install Ginkgo
        run: go install github.com/onsi/ginkgo/v2/ginkgo@latest

      - name: Run Ginkgo Test
        run: |
          cd ./test/e2e
          ginkgo --label-filter="${{ matrix.test }}" -r --fail-fast
